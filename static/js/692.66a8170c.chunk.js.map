{"version":3,"file":"static/js/692.66a8170c.chunk.js","mappings":"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","sources":["redux/selectors.js","webpack://my-projects/./src/components/Contacts/Contacts.module.css?5e71","components/Contacts/Contact/Contact.jsx","components/Contacts/ContactList/ContactList.jsx","../node_modules/nanoid/index.browser.js","components/Contacts/ContactForm/ContactForm.jsx","components/Contacts/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectFilterQuery = state => state.filter;\nexport const selectIsError = state => state.contacts.error;\nexport const selectIsLoading = state => state.contacts.isLoading;\n","// extracted by mini-css-extract-plugin\nexport default {\"contatcsContainer\":\"Contacts_contatcsContainer__PEkdl\",\"contacts__title\":\"Contacts_contacts__title__apyE8\",\"contactsForm\":\"Contacts_contactsForm__LZL0w\",\"contactsForm__field\":\"Contacts_contactsForm__field__ZQqIP\",\"contactsFrom__label\":\"Contacts_contactsFrom__label__SBzcj\",\"contactsForm__input\":\"Contacts_contactsForm__input__nSkjf\",\"contactsForm__svg\":\"Contacts_contactsForm__svg__v3JtZ\",\"contacts__button\":\"Contacts_contacts__button__Cn2tl\",\"contacts\":\"Contacts_contacts__Eg+6p\",\"noContacts\":\"Contacts_noContacts__R3N+k\",\"noContacts__text\":\"Contacts_noContacts__text__E90Wc\",\"findContacts__label\":\"Contacts_findContacts__label__yEsOi\",\"findContacts__input\":\"Contacts_findContacts__input__S+Elh\",\"findContacts__icon\":\"Contacts_findContacts__icon__ub1gK\",\"ContactList\":\"Contacts_ContactList__tFy-k\",\"ContactList__item\":\"Contacts_ContactList__item__DYxdg\",\"Contact\":\"Contacts_Contact__hzV7O\",\"Contact__title\":\"Contacts_Contact__title__x5i74\",\"Contact__text\":\"Contacts_Contact__text__35Ft1\",\"Contact__deleteButton\":\"Contacts_Contact__deleteButton__wtSEC\"};","import PropTypes from 'prop-types';\nimport css from '../Contacts.module.css';\n\nexport default function Contact({ contacts, onDelete }) {\n  return (\n    <>\n      {contacts\n        .sort((a, b) => b.id - a.id)\n        .map(({ id, name, number }, index) => (\n          <li key={id} className={css.ContactList__item}>\n            <h3 className={css.Contact__title}>Contact {index + 1}</h3>\n            <div className={css.Contact}>\n              <p className={css.Contact__text}>\n                <span style={{ fontWeight: 700 }}>Name: </span>\n                {name}\n              </p>\n              <p className={css.Contact__text}>\n                <span style={{ fontWeight: 700 }}>Phone:</span> {number}\n              </p>\n              <button\n                className={css.Contact__deleteButton}\n                type=\"button\"\n                onClick={() => onDelete(id)}\n              >\n                Delete\n              </button>\n            </div>\n          </li>\n        ))}\n    </>\n  );\n}\n\nContact.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","import Contact from '../Contact/Contact';\nimport PropTypes from 'prop-types';\nimport css from '../Contacts.module.css';\n\nexport default function ContactList({ contacts, onDelete }) {\n  return (\n    <ul className={css.ContactList}>\n      <Contact key={contacts.id} contacts={contacts} onDelete={onDelete} />\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport Notiflix from 'notiflix';\nimport { nanoid } from 'nanoid';\n\nimport { useSelector } from 'react-redux/es';\nimport { selectContacts } from '../../../redux/selectors';\n\nimport style from '../Contacts.module.css';\nimport { ImUser } from 'react-icons/im';\nimport { ImPhone } from 'react-icons/im';\n\nconst useLocalStorage = (key, defaultValue) => {\n  const [state, setState] = useState(() => {\n    return JSON.parse(window.localStorage.getItem(key)) ?? defaultValue;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState];\n};\n\nconst ContactForm = ({ sendDataToApp }) => {\n  const contacts = useSelector(selectContacts);\n\n  const [name, setName] = useLocalStorage('name', '');\n  const [number, setNumber] = useLocalStorage('number', '');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    const { name, number } = e.currentTarget.elements;\n\n    const contact = {\n      id: nanoid(),\n      name: name.value,\n      number: number.value,\n    };\n\n    if (onDuplicateCheck(contact.name)) {\n      e.currentTarget.reset();\n      // name.focus() || number.focus()\n      Notiflix.Notify.failure(`${contact.name} is already in contacts`);\n      return;\n    }\n\n    sendDataToApp({ name: name.value, number: number.value }, contact);\n    reset();\n  };\n\n  const onDuplicateCheck = name => {\n    const newContactName = name.toLowerCase();\n\n    return contacts.some(\n      contact => contact.name.toLowerCase() === newContactName\n    );\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={style.contactsForm} onSubmit={onSubmit}>\n      <div className={style.contactsForm__field}>\n        <label className={style.contactsFrom__label}>\n          Name\n          <input\n            className={style.contactsForm__input}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            pattern=\"^[a-zA-Z\\s]+$\"\n            placeholder=\"Rosie Simpson\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            onChange={handleChange}\n            required\n          />\n          <ImUser className={style.contactsForm__svg} />\n        </label>\n      </div>\n      <div className={style.contactsForm__field}>\n        <label className={style.contactsFrom__label}>\n          Number\n          <input\n            className={style.contactsForm__input}\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            pattern=\"^[+]?[0-9\\s]+$\"\n            placeholder=\"+123 456 789\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            onChange={handleChange}\n            required\n          />\n          <ImPhone className={style.contactsForm__svg} />\n        </label>\n      </div>\n      <button className={style.contacts__button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  sendDataToApp: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux/es';\n\nimport css from '../Contacts.module.css';\nimport { ImSearch } from 'react-icons/im';\n\nconst Filter = ({ changeFilter }) => {\n  const filterQuery = useSelector(state => state.filter);\n  return (\n    <div className={css.contactsForm__field}>\n      <label className={css.findContacts__label}>\n        Find contacts by name\n        <input\n          className={css.findContacts__input}\n          type=\"text\"\n          name=\"filter\"\n          value={filterQuery}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          onChange={changeFilter}\n          required\n        />\n        <ImSearch className={css.findContacts__icon} />\n      </label>\n    </div>\n  );\n};\n\nexport default Filter;\n\nFilter.propTypes = {\n  changeFilter: PropTypes.func.isRequired,\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\n\nimport { fetchContacts, deleteContact, addContact } from 'redux/ApiOperations';\nimport {\n  selectContacts,\n  selectFilterQuery,\n  selectIsError,\n  selectIsLoading,\n} from '../redux/selectors.js';\n\nimport Loader from '../components/Loader/Loader.jsx';\nimport ContactList from '../components/Contacts/ContactList/ContactList.jsx';\nimport ContactForm from '../components/Contacts/ContactForm/ContactForm.jsx';\nimport Filter from '../components/Contacts/Filter/Filter.jsx';\n\nimport css from '../components/Contacts/Contacts.module.css';\n\nconst Contacts = () => {\n  // const isFirstRender = useRef(true);\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectContacts);\n  const filterQuery = useSelector(selectFilterQuery);\n  const isError = useSelector(selectIsError);\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    // if (isFirstRender.current) {\n    //   isFirstRender.current = false;\n    //   return;\n    // }\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const formOnSubmit = newContact => {\n    dispatch(addContact(newContact));\n  };\n\n  const changeFilter = e => {\n    const query = e.currentTarget.value;\n\n    dispatch({ type: 'filter/filter', payload: query });\n  };\n\n  const deleteContactById = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  const normalizedFilter = filterQuery.toLowerCase();\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n\n  return (\n    <div style={{ width: '100%' }}>\n      <h1 className={css.contacts__title}>Phonebook</h1>\n      <ContactForm sendDataToApp={formOnSubmit} />\n      {isError && <h1>Ops, something went wrong</h1>}\n      {isLoading && <Loader />}\n\n      {contacts.length > 0 && !isError && !isLoading && (\n        <div className={css.contacts}>\n          <h2 className={css.contacts__title}>Contacts</h2>\n          <Filter changeFilter={changeFilter} />\n          <ContactList\n            contacts={filteredContacts}\n            onDelete={deleteContactById}\n          />\n        </div>\n      )}\n\n      {!isLoading && contacts.length < 1 && !isError && (\n        <div className={css.contacts}>\n          <h2 className={css.contacts__title}>Contacts</h2>\n          <div className={css.noContacts}>\n            <p className={css.noContacts__text}>There are no contacts yet</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectFilterQuery","filter","selectIsError","error","selectIsLoading","isLoading","Contact","onDelete","sort","a","b","id","map","index","name","number","className","css","style","fontWeight","type","onClick","ContactList","nanoid","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","useLocalStorage","key","defaultValue","useState","JSON","parse","window","localStorage","getItem","setState","useEffect","setItem","stringify","sendDataToApp","useSelector","setName","setNumber","handleChange","e","target","value","onDuplicateCheck","newContactName","toLowerCase","some","contact","reset","onSubmit","preventDefault","currentTarget","elements","Notiflix","pattern","placeholder","title","onChange","required","changeFilter","filterQuery","dispatch","useDispatch","isError","fetchContacts","normalizedFilter","filteredContacts","includes","width","newContact","addContact","Loader","length","query","payload","contactId","deleteContact"],"sourceRoot":""}