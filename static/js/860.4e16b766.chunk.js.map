{"version":3,"file":"static/js/860.4e16b766.chunk.js","mappings":"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","sources":["redux/selectors.js","components/ContactList/Contact/Contact.jsx","components/ContactList/ContactList.jsx","components/ContactFrom/ContactFrom.jsx","components/Filter/Filter.jsx","p/Contacts.js"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectFilterQuery = state => state.filter;\nexport const selectIsError = state => state.contacts.error;\nexport const selectIsLoading = state => state.contacts.isLoading;\n","import PropTypes from 'prop-types';\n\nexport default function Contact({ contacts, onDelete }) {\n  return contacts\n    .sort((a, b) => b.id - a.id)\n    .map(({ id, name, phone }) => (\n      <li key={id}>\n        <p>Name: {name}</p>\n        <p>Phone: {phone}</p>\n        <button type=\"button\" onClick={() => onDelete(id)}>\n          Delete\n        </button>\n      </li>\n    ));\n}\n\nContact.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","import Contact from './Contact/Contact';\nimport PropTypes from 'prop-types';\n\nexport default function ContactList({ contacts, onDelete }) {\n  return (\n    <ul>\n      <Contact key={contacts.id} contacts={contacts} onDelete={onDelete} />\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport Notiflix from 'notiflix';\nimport { nanoid } from 'nanoid';\n\nimport { useSelector } from 'react-redux/es';\nimport { selectContacts } from '../../redux/selectors';\n\nconst useLocalStorage = (key, defaultValue) => {\n  const [state, setState] = useState(() => {\n    return JSON.parse(window.localStorage.getItem(key)) ?? defaultValue;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState];\n};\n\nconst ContactForm = ({ sendDataToApp }) => {\n  const contacts = useSelector(selectContacts);\n\n  const [name, setName] = useLocalStorage('name', '');\n  const [number, setNumber] = useLocalStorage('number', '');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    const { name, number } = e.currentTarget.elements;\n\n    const contact = {\n      id: nanoid(),\n      name: name.value,\n      number: number.value,\n    };\n\n    if (onDuplicateCheck(contact.name)) {\n      e.currentTarget.reset();\n      // name.focus() || number.focus()\n      Notiflix.Notify.failure(`${contact.name} is already in contacts`);\n      return;\n    }\n\n    sendDataToApp({ name: name.value, number: number.value }, contact);\n    reset();\n  };\n\n  const onDuplicateCheck = name => {\n    const newContactName = name.toLowerCase();\n\n    return contacts.some(\n      contact => contact.name.toLowerCase() === newContactName\n    );\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={onSubmit}>\n      <label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Z\\s]+$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          onChange={handleChange}\n          required\n        />\n      </label>\n      <label>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"^[+]?[0-9\\s]+$\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          onChange={handleChange}\n          required\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  sendDataToApp: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux/es';\n\nconst Filter = ({ changeFilter }) => {\n  const filterQuery = useSelector(state => state.filter);\n  return (\n    <>\n      <label>\n        Find contacts by name\n        <input\n          type=\"text\"\n          name=\"filter\"\n          value={filterQuery}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          onChange={changeFilter}\n          required\n        />\n      </label>\n    </>\n  );\n};\n\nexport default Filter;\n\nFilter.propTypes = {\n  changeFilter: PropTypes.func.isRequired,\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\n\nimport { fetchContacts, deleteContact, addContact } from 'redux/ApiOperations';\nimport {\n  selectContacts,\n  selectFilterQuery,\n  selectIsError,\n  selectIsLoading,\n} from '../redux/selectors.js';\n\nimport Loader from '../components/Loader/Loader,.jsx';\nimport ContactList from '../components/ContactList/ContactList.jsx';\nimport ContactForm from '../components/ContactFrom/ContactFrom.jsx';\nimport Filter from '../components/Filter/Filter.jsx';\n\nconst Contacts = () => {\n  // const isFirstRender = useRef(true);\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectContacts);\n  const filterQuery = useSelector(selectFilterQuery);\n  const isError = useSelector(selectIsError);\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    // if (isFirstRender.current) {\n    //   isFirstRender.current = false;\n    //   return;\n    // }\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const formOnSubmit = (data, newContact) => {\n    console.log('Form data >>> ', data);\n\n    dispatch(addContact(newContact));\n  };\n\n  const changeFilter = e => {\n    const query = e.currentTarget.value;\n\n    dispatch({ type: 'filter/filter', payload: query });\n  };\n\n  const deleteContactById = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  const normalizedFilter = filterQuery.toLowerCase();\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm sendDataToApp={formOnSubmit} />\n      {isError && <h1>Ops, something went wrong</h1>}\n      {isLoading && <Loader />}\n\n      {contacts.length > 0 && !isError && !isLoading ? (\n        <div>\n          <h2>Contacts</h2>\n          <Filter changeFilter={changeFilter} />\n          <ContactList\n            contacts={filteredContacts}\n            onDelete={deleteContactById}\n          />\n        </div>\n      ) : (\n        <h1>There is no contacts yet</h1>\n      )}\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectFilterQuery","filter","selectIsError","error","selectIsLoading","isLoading","Contact","onDelete","sort","a","b","id","map","name","phone","type","onClick","ContactList","useLocalStorage","key","defaultValue","useState","JSON","parse","window","localStorage","getItem","setState","useEffect","setItem","stringify","sendDataToApp","useSelector","setName","number","setNumber","handleChange","e","target","value","onDuplicateCheck","newContactName","toLowerCase","some","contact","reset","onSubmit","preventDefault","currentTarget","elements","nanoid","Notiflix","pattern","title","onChange","required","changeFilter","filterQuery","dispatch","useDispatch","isError","fetchContacts","normalizedFilter","filteredContacts","includes","data","newContact","console","log","addContact","length","query","payload","contactId","deleteContact"],"sourceRoot":""}